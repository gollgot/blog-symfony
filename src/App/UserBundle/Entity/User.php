<?php

namespace App\UserBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\ORM\Mapping\JoinColumn;
use Doctrine\ORM\Mapping\ManyToOne;
use Doctrine\ORM\Mapping\OneToMany;
use Doctrine\ORM\Mapping\OneToOne;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * User
 *
 * @ORM\Table(name="user")
 * @ORM\Entity(repositoryClass="App\UserBundle\Repository\UserRepository")
 * @UniqueEntity("username", message="Ce nom d'utilisateur n'est pas disponible")
 */
class User implements UserInterface
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="username", type="string", length=255, unique=true)
	 * @Assert\Length(
	 *      min = 3,
	 *      minMessage = "Minimum 3 caractères"
	 * )
	 * @Assert\NotBlank(message="Ne doit pas être vide")
     */
    private $username;

    /**
     * @var string
     *
     * @ORM\Column(name="password", type="string", length=255)
	 * @Assert\Length(
	 *      min = 3,
	 *      minMessage = "Minimum 3 caractères"
	 * )
	 * @Assert\NotBlank(message="Ne doit pas être vide")
     */
    private $password;

    /**
     * @var string
     *
     * @ORM\Column(name="salt", type="string", length=255)
     */
    private $salt;

	/**
	 * @var \DateTime
	 *
	 * @ORM\Column(name="created_at", type="datetime")
	 */
	private $createdAt;

	/**
	 * Many users has one roles
	 * @ManyToOne(targetEntity="App\UserBundle\Entity\Role", inversedBy="users")
	 * @JoinColumn(name="role_id", referencedColumnName="id")
	 */
    private $role;

	/**
	 * One User has Many Posts.
	 * @OneToMany(targetEntity="AppBundle\Entity\Post", mappedBy="author")
	 */
	private $posts;

	/**
	 * One user has one api token.
	 * @OneToOne(targetEntity="App\UserBundle\Entity\ApiToken", mappedBy="user", cascade={"remove"})
	 */
	private $apiToken;


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set salt
     *
     * @param string $salt
     *
     * @return User
     */
    public function setSalt($salt)
    {
        $this->salt = $salt;

        return $this;
    }

    /**
     * Get salt
     *
     * @return string
     */
    public function getSalt()
    {
        return $this->salt;
    }


	/**
	 * @return \DateTime
	 */
	public function getCreatedAt()
	{
		return $this->createdAt;
	}

	/**
	 * @param \DateTime $createdAt
	 */
	public function setCreatedAt($createdAt)
	{
		$this->createdAt = $createdAt;
	}


    /**
     * Set role
     *
     * @param \App\UserBundle\Entity\Role $role
     *
     * @return User
     */
    public function setRole(\App\UserBundle\Entity\Role $role = null)
    {
        $this->role = $role;

        return $this;
    }

    /**
     * Get role
     *
     * @return \App\UserBundle\Entity\Role
     */
    public function getRole()
    {
        return $this->role;
    }

	/**
	 * Returns the roles granted to the user. Mandatory, it's used when we login, symfony search the getRoles() function
	 * in the User entity, and it will be return an array of string (the roles), so I return the array stored in the
	 * getRole()->getName(), this is the role name of the user's role
	 *
	 * // Generated by implements
	 * <code>
	 * public function getRoles()
	 * {
	 *     return array('ROLE_USER');
	 * }
	 * </code>
	 *
	 * Alternatively, the roles might be stored on a ``roles`` property,
	 * and populated in any number of different ways when the user object
	 * is created.
	 *
	 * @return (Role|string)[] The user roles
	 */
	public function getRoles()
	{
		return $this->getRole()->getName();
	}

	/**
	 * Removes sensitive data from the user.
	 *
	 * This is important if, at any given point, sensitive information like
	 * the plain-text password is stored on this object.
	 */
	public function eraseCredentials()
	{
		// TODO: Implement eraseCredentials() method.
	}
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->posts = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add post
     *
     * @param \AppBundle\Entity\Post $post
     *
     * @return User
     */
    public function addPost(\AppBundle\Entity\Post $post)
    {
        $this->posts[] = $post;

        return $this;
    }

    /**
     * Remove post
     *
     * @param \AppBundle\Entity\Post $post
     */
    public function removePost(\AppBundle\Entity\Post $post)
    {
        $this->posts->removeElement($post);
    }

    /**
     * Get posts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPosts()
    {
        return $this->posts;
    }

    /**
     * Set apiToken
     *
     * @param \App\UserBundle\Entity\ApiToken $apiToken
     *
     * @return User
     */
    public function setApiToken(\App\UserBundle\Entity\ApiToken $apiToken = null)
    {
        $this->apiToken = $apiToken;

        return $this;
    }

    /**
     * Get apiToken
     *
     * @return \App\UserBundle\Entity\ApiToken
     */
    public function getApiToken()
    {
        return $this->apiToken;
    }

}
